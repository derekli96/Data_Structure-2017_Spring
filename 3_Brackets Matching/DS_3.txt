作业编号
　　上机作业3：栈、队列、双端队列

问题描述
　　小M想制作一个IDE插件来帮助他检查自己代码中的括号是否都已配对。为了简化问题，小M把所有不是括号的字符都忽略掉了，现在需要检查一个字符串是否为括号序列。
　　一个括号序列可以用以下方式进行定义：
　　1、空的字符串是配对的括号序列；
　　2、若字符串A是括号序列，那么字符串(A)、[A]、{A}、<A>都是括号序列；
　　3、若字符串A和B是括号序列，那么AB也是括号序列；
　　4、只有上述方式产生的字符串是括号序列。
　　例如(){<[]>}、((()))、空串等都是括号序列，而>)(<、(()))、<(>)等就不是括号序列。
　　为了降低编程难度，小M对自己的IDE做了进一步的简化：只允许在文件开头和结尾增删代码。具体地讲，最开始小M的IDE中只有一个空的字符串，每次会进行如下四个操作中的一个：
　　1、在字符串末尾添加一个括号；
　　2、在字符串开头添加一个括号；
　　3、删除字符串末尾的一个括号；
　　4、删除字符串开头的一个括号。
　　每进行一个操作，都要判断当前的字符串是否为括号序列。

输入描述
　　第一行包含1个正整数n，表示操作的数量。
　　接下来n行，每行描述一个操作。其中每行首先包含一个1到4正整数，表示操作类型。
　　若操作为1或2，则该行接下来会有一个空格和一个字符，表示在末尾或开头增加了相应的括号。其中出现的字符只可能是8种括号“()[]{}<>”中的一种。
　　若操作为3或4，则该行接下来什么都没有，表示在删除末尾或开头的一个括号。当字符串为空的时候不会出现删除操作。

输出描述
　　输出n行，每行一个整数0或1，表示每个操作后形成的字符串是否为括号序列。
子任务
　　1、有10%的数据，n=300，只有操作1。
　　2、另外10%的数据，n=2000，只有操作1。
　　3、另外20%的数据，n=100000，只有操作1。
　　4、另外10%的数据，n=300，只有操作1和2。
　　5、另外10%的数据，n=2000，只有操作1和2。
　　6、另外20%的数据，n=100000，只有操作1和2。
　　7、另外10%的数据，n=2000。
　　8、另外10%的数据，n=100000。

提示
　　可能需要使用栈、队列或双端队列来维护还没有配对的括号。
　　如果每个操作难以用O(1)的时间复杂度完成，每次对整个字符串重新计算配对情况也可以得到大量分数。
　　当包含删除操作时，我们可能会需要使用两个双端队列。

样例输入
12
1 [
1 (
1 )
1 {
1 {
1 }
1 }
1 ]
1 {
1 }
1 )
1 <

样例输出
0
0
0
0
0
0
0
1
0
1
0
0

样例输入
12
2 }
1 {
1 }
1 {
1 {
1 <
1 >
1 }
2 {
1 }
1 >
1 <

样例输出
0
0
0
0
0
0
0
0
0
1
0
0

样例输入
12
1 )
1 <
3
1 {
2 >
3
3
1 <
4
1 >
1 [
1 >

样例输出
0
0
0
0
0
0
0
0
0
1
0
0

样例输入
4
1 (
1 )
1 (
4

样例输出
0
1
0
0
