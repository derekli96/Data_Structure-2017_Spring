作业编号
　　上机作业7：二叉搜索树、平衡树

问题描述
　　公司的人口总是不断在流动的，有人今天入职了，有人明天离职了。
　　作为公司的人力资源，有可能需要询问当前公司员工中的编号情况。

输入格式
　　第一行一个数字N，表示有N个事件依次发生。接下来N行，每行有可能是：
　　1.一个字符'I'和一个整数X，表示一个编号为A的员工入职了；
　　2.一个字符'D'和一个整数X，表示一个编号为A的员工离职了；
　　3.一个字符'Q'和一个整数K，表示人力资源询问目前公司里编号第K小的员工的编号。
　　4.一个字符'S'和一个整数X，表示人力资源询问目前公司里编号为X的员工的编号是第几小。
　　保证所有出现过的员工编号两两不同，且保证所有数据的合法性。

输出格式
　　对于每个询问，输出一行一个整数，表示对应询问的答案。

样例输入
10
I 3
I 7
I 1
I 9
I 8
Q 2
S 8
D 3
Q 2
S 8

样例输出
3
4
7
3

数据规模和约定
　　20%的数据，只含I、D、Q事件。
　　20%的数据，只含I、D、S事件。
　　20%的数据，只含I、Q、S事件。
　　80%的数据，N≤200000，数据没有经过特殊构造。
　　100%的数据，N≤200000。

相关资料
　　https://en.wikipedia.org/wiki/AVL_tree
　　https://en.wikipedia.org/wiki/Splay
　　https://en.wikipedia.org/wiki/Red%E2%80%93black_tree
　　https://en.wikipedia.org/wiki/Treap
　　https://en.wikipedia.org/wiki/Weight-balanced_tree
　　如果遇到特殊构造的数据，二叉查找树会退化成一条链，导致效率低下。因此保证二叉查找树良好性能需要对其进行平衡化。二叉查找树的平衡化有很多种，课上的AVL是其中的一种实现。
　　AVL是左右子树的高度差超过阈值就进行一系列复杂的旋转。借鉴Weight-balanced-tree，一个简单的平衡化思想是：如果对于一个节点，左（右）子树的大小减右（左）子树的大小超过一定阈值，则将这个节点为根的子树进行右（左）旋操作，使得旋转后新的子树，其左右子树的大小比旋转前更平衡。