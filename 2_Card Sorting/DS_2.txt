作业编号
　　上机作业2：顺序表和链表

问题描述
　　小M有n摞卡片，最初每一摞中都只有一张卡片。现在小M想对这些卡片进行m步整理，每步整理为：取出某一摞卡片最上面的一张，输出这张卡片的编号，然后放到另外一摞的最上面。
　　整理的过程中，肯定会出现某些摞一张卡片都没有的情况。小M不会试图从没有卡片的卡片摞中取出卡片。
　　经过努力，小M终于完成了卡片摞的整理。但正在学习数据结构的小M还想再挑战一下自己：他把一部分整理步骤改成了询问某一摞卡片第k张的编号。
　　你需要帮助小M完成卡片摞的整理和新的挑战。

输入描述
　　第一行包含2个正整数n和m，表示卡片摞的数目、整理和询问的总数。其中卡片摞的编号为1到n的整数，每摞卡片中最初的卡片编号与卡片摞的编号相同。
　　接下来m行，每行描述一个整理步骤或一个询问，其中每行首先会包含1个整数1或2。
　　若为1，表示一个整理步骤，接下来会有两个整数x和y，表示把编号为x的卡片摞最上面的一张卡片移动到编号为y的卡片摞最上面，同时输出这张卡片的编号。（保证卡片摞编号合法，保证x≠y，且不会试图移动空的卡片摞）
　　若为2，表示一个询问，接下来会有两个整数x和k，表示需要输出编号为x的卡片摞从下往上数第k张（从1开始数）卡片的编号。（保证k不大于这摞卡片的张数）

输出描述
　　输出m行，每行一个整数，表示每个整理步骤或询问对应的卡片编号。

样例输入
5 20
1 1 5
2 5 1
1 5 2
2 2 2
1 3 5
2 5 2
1 4 5
2 5 1
1 2 5
2 5 2
1 5 4
2 4 1
1 5 3
2 3 1
1 5 3
2 3 1
1 5 4
2 4 2
1 2 3
2 3 3

样例输出
1
5
1
1
3
3
4
5
1
3
1
1
4
4
3
4
5
5
2
2

子任务
　　1、有40%的数据，n≤1000，m≤10000，且只有整理卡片，没有询问。
　　2、有40%的数据，n≤100000，m≤1000000，且只有整理卡片，没有询问。
　　3、有10%的数据，n≤1000，m≤10000。
　　4、有10%的数据，n≤100000，m≤1000000。

注意事项
　　本题禁止使用标准库的vector及更强大的标准库功能。

提示
　　链表能够实现前两个子任务，但子任务2需要每次操作用O(1)才能不超时。
　　子任务3数据规模较小，因此不用过于担心时空效率，使用一个O(nm)的方法即可。
　　子任务4有两种解决思路：
　　1、我们并没有要求每读一行就输出一行，可以考虑将所有输入都存下来，待处理好以后再逐个输出。
　　2、熟悉标准库vector的同学会发现，这道题目利用vector能在末尾增删元素的功能，可以很轻松地解决。由于这道题目的难点在这里，因此我们不允许直接使用vector。那么我们怎么自己实现一个具有vector功能的数据结构呢？（做完以后还可以思考：有了vector以后，我们什么时候需要用到链表？）
